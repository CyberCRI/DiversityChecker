/**********************************************************************
 * Extern for Q
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var Q = {
  "resolve": {
    "resolve": function () {},
    "nextTick": {
      "runAfter": function () {}
    },
    "longStackSupport": {},
    "defer": function () {},
    "Promise": {
      "race": function () {},
      "all": function () {},
      "reject": function () {},
      "resolve": function () {}
    },
    "promise": {
      "race": function () {},
      "all": function () {},
      "reject": function () {},
      "resolve": function () {}
    },
    "passByCopy": function () {},
    "join": function () {},
    "race": function () {},
    "makePromise": function () {},
    "tap": function () {},
    "when": function () {},
    "thenResolve": function () {},
    "thenReject": function () {},
    "nearer": function () {},
    "isPromise": function () {},
    "isPromiseAlike": function () {},
    "isPending": function () {},
    "isFulfilled": function () {},
    "isRejected": function () {},
    "resetUnhandledRejections": function () {},
    "getUnhandledReasons": function () {},
    "stopUnhandledRejectionTracking": function () {},
    "reject": function () {},
    "fulfill": function () {},
    "master": function () {},
    "spread": function () {},
    "async": function () {},
    "spawn": function () {},
    "return": function () {},
    "promised": function () {},
    "dispatch": function () {},
    "get": function () {},
    "set": function () {},
    "delete": function () {},
    "del": function () {},
    "post": function () {},
    "mapply": function () {},
    "invoke": function () {},
    "mcall": function () {},
    "send": function () {},
    "fapply": function () {},
    "fcall": function () {},
    "try": function () {},
    "fbind": function () {},
    "keys": function () {},
    "all": function () {},
    "any": function () {},
    "allResolved": function () {},
    "allSettled": function () {},
    "catch": function () {},
    "fail": function () {},
    "progress": function () {},
    "finally": function () {},
    "fin": function () {},
    "done": function () {},
    "timeout": function () {},
    "delay": function () {},
    "nfapply": function () {},
    "nfcall": function () {},
    "denodeify": function () {},
    "nfbind": function () {},
    "nbind": function () {},
    "npost": function () {},
    "nmapply": function () {},
    "ninvoke": function () {},
    "nmcall": function () {},
    "nsend": function () {},
    "nodeify": function () {},
    "noConflict": function () {}
  },
  "nextTick": {
    "runAfter": function () {}
  },
  "longStackSupport": {},
  "defer": function () {},
  "Promise": {
    "race": function () {},
    "all": function () {},
    "reject": function () {},
    "resolve": {
      "resolve": function () {},
      "nextTick": {
        "runAfter": function () {}
      },
      "longStackSupport": {},
      "defer": function () {},
      "Promise": function () {},
      "promise": function () {},
      "passByCopy": function () {},
      "join": function () {},
      "race": function () {},
      "makePromise": function () {},
      "tap": function () {},
      "when": function () {},
      "thenResolve": function () {},
      "thenReject": function () {},
      "nearer": function () {},
      "isPromise": function () {},
      "isPromiseAlike": function () {},
      "isPending": function () {},
      "isFulfilled": function () {},
      "isRejected": function () {},
      "resetUnhandledRejections": function () {},
      "getUnhandledReasons": function () {},
      "stopUnhandledRejectionTracking": function () {},
      "reject": function () {},
      "fulfill": function () {},
      "master": function () {},
      "spread": function () {},
      "async": function () {},
      "spawn": function () {},
      "return": function () {},
      "promised": function () {},
      "dispatch": function () {},
      "get": function () {},
      "set": function () {},
      "delete": function () {},
      "del": function () {},
      "post": function () {},
      "mapply": function () {},
      "invoke": function () {},
      "mcall": function () {},
      "send": function () {},
      "fapply": function () {},
      "fcall": function () {},
      "try": function () {},
      "fbind": function () {},
      "keys": function () {},
      "all": function () {},
      "any": function () {},
      "allResolved": function () {},
      "allSettled": function () {},
      "catch": function () {},
      "fail": function () {},
      "progress": function () {},
      "finally": function () {},
      "fin": function () {},
      "done": function () {},
      "timeout": function () {},
      "delay": function () {},
      "nfapply": function () {},
      "nfcall": function () {},
      "denodeify": function () {},
      "nfbind": function () {},
      "nbind": function () {},
      "npost": function () {},
      "nmapply": function () {},
      "ninvoke": function () {},
      "nmcall": function () {},
      "nsend": function () {},
      "nodeify": function () {},
      "noConflict": function () {}
    }
  },
  "promise": {
    "race": function () {},
    "all": function () {},
    "reject": function () {},
    "resolve": {
      "resolve": function () {},
      "nextTick": {
        "runAfter": function () {}
      },
      "longStackSupport": {},
      "defer": function () {},
      "Promise": function () {},
      "promise": function () {},
      "passByCopy": function () {},
      "join": function () {},
      "race": function () {},
      "makePromise": function () {},
      "tap": function () {},
      "when": function () {},
      "thenResolve": function () {},
      "thenReject": function () {},
      "nearer": function () {},
      "isPromise": function () {},
      "isPromiseAlike": function () {},
      "isPending": function () {},
      "isFulfilled": function () {},
      "isRejected": function () {},
      "resetUnhandledRejections": function () {},
      "getUnhandledReasons": function () {},
      "stopUnhandledRejectionTracking": function () {},
      "reject": function () {},
      "fulfill": function () {},
      "master": function () {},
      "spread": function () {},
      "async": function () {},
      "spawn": function () {},
      "return": function () {},
      "promised": function () {},
      "dispatch": function () {},
      "get": function () {},
      "set": function () {},
      "delete": function () {},
      "del": function () {},
      "post": function () {},
      "mapply": function () {},
      "invoke": function () {},
      "mcall": function () {},
      "send": function () {},
      "fapply": function () {},
      "fcall": function () {},
      "try": function () {},
      "fbind": function () {},
      "keys": function () {},
      "all": function () {},
      "any": function () {},
      "allResolved": function () {},
      "allSettled": function () {},
      "catch": function () {},
      "fail": function () {},
      "progress": function () {},
      "finally": function () {},
      "fin": function () {},
      "done": function () {},
      "timeout": function () {},
      "delay": function () {},
      "nfapply": function () {},
      "nfcall": function () {},
      "denodeify": function () {},
      "nfbind": function () {},
      "nbind": function () {},
      "npost": function () {},
      "nmapply": function () {},
      "ninvoke": function () {},
      "nmcall": function () {},
      "nsend": function () {},
      "nodeify": function () {},
      "noConflict": function () {}
    }
  },
  "passByCopy": function () {},
  "join": function () {},
  "race": function () {},
  "makePromise": function () {},
  "tap": function () {},
  "when": function () {},
  "thenResolve": function () {},
  "thenReject": function () {},
  "nearer": function () {},
  "isPromise": function () {},
  "isPromiseAlike": function () {},
  "isPending": function () {},
  "isFulfilled": function () {},
  "isRejected": function () {},
  "resetUnhandledRejections": function () {},
  "getUnhandledReasons": function () {},
  "stopUnhandledRejectionTracking": function () {},
  "reject": function () {},
  "fulfill": function () {},
  "master": function () {},
  "spread": function () {},
  "async": function () {},
  "spawn": function () {},
  "return": function () {},
  "promised": function () {},
  "dispatch": function () {},
  "get": function () {},
  "set": function () {},
  "delete": function () {},
  "del": function () {},
  "post": function () {},
  "mapply": function () {},
  "invoke": function () {},
  "mcall": function () {},
  "send": function () {},
  "fapply": function () {},
  "fcall": function () {},
  "try": function () {},
  "fbind": function () {},
  "keys": function () {},
  "all": function () {},
  "any": function () {},
  "allResolved": function () {},
  "allSettled": function () {},
  "catch": function () {},
  "fail": function () {},
  "progress": function () {},
  "finally": function () {},
  "fin": function () {},
  "done": function () {},
  "timeout": function () {},
  "delay": function () {},
  "nfapply": function () {},
  "nfcall": function () {},
  "denodeify": function () {},
  "nfbind": function () {},
  "nbind": function () {},
  "npost": function () {},
  "nmapply": function () {},
  "ninvoke": function () {},
  "nmcall": function () {},
  "nsend": function () {},
  "nodeify": function () {},
  "noConflict": function () {}
};
Q.resolve.defer.prototype = {
  "makeNodeResolver": function () {}
};
Q.resolve.makePromise.prototype = {
  "passByCopy": function () {},
  "join": function () {},
  "race": function () {},
  "toString": function () {},
  "then": function () {},
  "tap": function () {},
  "thenResolve": function () {},
  "thenReject": function () {},
  "isPending": function () {},
  "isFulfilled": function () {},
  "isRejected": function () {},
  "spread": function () {},
  "dispatch": function () {},
  "get": function () {},
  "set": function () {},
  "delete": function () {},
  "del": function () {},
  "post": function () {},
  "mapply": function () {},
  "invoke": function () {},
  "mcall": function () {},
  "send": function () {},
  "fapply": function () {},
  "fcall": function () {},
  "fbind": function () {},
  "keys": function () {},
  "all": function () {},
  "any": function () {},
  "allResolved": function () {},
  "allSettled": function () {},
  "catch": function () {},
  "fail": function () {},
  "progress": function () {},
  "finally": function () {},
  "fin": function () {},
  "done": function () {},
  "timeout": function () {},
  "delay": function () {},
  "nfapply": function () {},
  "nfcall": function () {},
  "denodeify": function () {},
  "nfbind": function () {},
  "nbind": function () {},
  "npost": function () {},
  "nmapply": function () {},
  "ninvoke": function () {},
  "nmcall": function () {},
  "nsend": function () {},
  "nodeify": function () {}
};
Q.defer.prototype = {
  "makeNodeResolver": function () {}
};
Q.Promise.resolve.defer.prototype = {
  "makeNodeResolver": function () {}
};
Q.Promise.resolve.makePromise.prototype = {
  "passByCopy": function () {},
  "join": function () {},
  "race": function () {},
  "toString": function () {},
  "then": function () {},
  "tap": function () {},
  "thenResolve": function () {},
  "thenReject": function () {},
  "isPending": function () {},
  "isFulfilled": function () {},
  "isRejected": function () {},
  "spread": function () {},
  "dispatch": function () {},
  "get": function () {},
  "set": function () {},
  "delete": function () {},
  "del": function () {},
  "post": function () {},
  "mapply": function () {},
  "invoke": function () {},
  "mcall": function () {},
  "send": function () {},
  "fapply": function () {},
  "fcall": function () {},
  "fbind": function () {},
  "keys": function () {},
  "all": function () {},
  "any": function () {},
  "allResolved": function () {},
  "allSettled": function () {},
  "catch": function () {},
  "fail": function () {},
  "progress": function () {},
  "finally": function () {},
  "fin": function () {},
  "done": function () {},
  "timeout": function () {},
  "delay": function () {},
  "nfapply": function () {},
  "nfcall": function () {},
  "denodeify": function () {},
  "nfbind": function () {},
  "nbind": function () {},
  "npost": function () {},
  "nmapply": function () {},
  "ninvoke": function () {},
  "nmcall": function () {},
  "nsend": function () {},
  "nodeify": function () {}
};
Q.promise.resolve.defer.prototype = {
  "makeNodeResolver": function () {}
};
Q.promise.resolve.makePromise.prototype = {
  "passByCopy": function () {},
  "join": function () {},
  "race": function () {},
  "toString": function () {},
  "then": function () {},
  "tap": function () {},
  "thenResolve": function () {},
  "thenReject": function () {},
  "isPending": function () {},
  "isFulfilled": function () {},
  "isRejected": function () {},
  "spread": function () {},
  "dispatch": function () {},
  "get": function () {},
  "set": function () {},
  "delete": function () {},
  "del": function () {},
  "post": function () {},
  "mapply": function () {},
  "invoke": function () {},
  "mcall": function () {},
  "send": function () {},
  "fapply": function () {},
  "fcall": function () {},
  "fbind": function () {},
  "keys": function () {},
  "all": function () {},
  "any": function () {},
  "allResolved": function () {},
  "allSettled": function () {},
  "catch": function () {},
  "fail": function () {},
  "progress": function () {},
  "finally": function () {},
  "fin": function () {},
  "done": function () {},
  "timeout": function () {},
  "delay": function () {},
  "nfapply": function () {},
  "nfcall": function () {},
  "denodeify": function () {},
  "nfbind": function () {},
  "nbind": function () {},
  "npost": function () {},
  "nmapply": function () {},
  "ninvoke": function () {},
  "nmcall": function () {},
  "nsend": function () {},
  "nodeify": function () {}
};
Q.makePromise.prototype = {
  "passByCopy": function () {},
  "join": function () {},
  "race": function () {},
  "toString": function () {},
  "then": function () {},
  "tap": function () {},
  "thenResolve": function () {},
  "thenReject": function () {},
  "isPending": function () {},
  "isFulfilled": function () {},
  "isRejected": function () {},
  "spread": function () {},
  "dispatch": function () {},
  "get": function () {},
  "set": function () {},
  "delete": function () {},
  "del": function () {},
  "post": function () {},
  "mapply": function () {},
  "invoke": function () {},
  "mcall": function () {},
  "send": function () {},
  "fapply": function () {},
  "fcall": function () {},
  "fbind": function () {},
  "keys": function () {},
  "all": function () {},
  "any": function () {},
  "allResolved": function () {},
  "allSettled": function () {},
  "catch": function () {},
  "fail": function () {},
  "progress": function () {},
  "finally": function () {},
  "fin": function () {},
  "done": function () {},
  "timeout": function () {},
  "delay": function () {},
  "nfapply": function () {},
  "nfcall": function () {},
  "denodeify": function () {},
  "nfbind": function () {},
  "nbind": function () {},
  "npost": function () {},
  "nmapply": function () {},
  "ninvoke": function () {},
  "nmcall": function () {},
  "nsend": function () {},
  "nodeify": function () {},

  /* Additions for Q.XHR */
  "xhr": {
    "get": function() {},
    "delete": function() {},
    "head": function() {},
    "post": function() {},
    "put": function() {},
    "patch": function() {},
    "defaults": {},
    "get": function() {},
    "get": function() {},
  }
};
/**********************************************************************
 * End Generated Extern for Q
/**********************************************************************/